
# ===================================================================
# ONEBOX AGGREGATOR - ENVIRONMENT CONFIGURATION
# ===================================================================
# This file contains all environment variables needed for the complete
# Onebox Aggregator system including Node.js/TypeScript services,
# Python FastAPI services, VectorDB, and external integrations.
#
# Copy this file to .env and fill in your actual values.
# ===================================================================

# ===================================================================
# EMAIL PROVIDER CONFIGURATION (IMAP)
# ===================================================================
# Configuration for connecting to your email provider via IMAP
# Required for: Node.js main application, IMAP services

# Your email provider's IMAP server address
# Examples: imap.gmail.com (Gmail), outlook.office365.com (Outlook), imap.yahoo.com (Yahoo)
IMAP_SERVER=your.imap.server.com

# IMAP port (usually 993 for SSL/TLS, 143 for STARTTLS)
IMAP_PORT=993

# Your email address
IMAP_USER=your.email@example.com

# Your email password or app-specific password
# For Gmail: Generate an App Password in Google Account settings
# For Outlook: Use your regular password or app password
IMAP_PASSWORD=your_app_specific_password

# Enable TLS encryption (recommended: true)
IMAP_TLS=true

# ===================================================================
# SEARCH SERVICES CONFIGURATION
# ===================================================================
# Configuration for Elasticsearch and Vector Database services

# Elasticsearch connection URL
# Used by: Python search_service.py, TypeScript ElasticsearchService
ELASTICSEARCH_URL=http://localhost:9200
ELASTICSEARCH_NODE=http://localhost:9200

# Vector Database configuration
# Used by: TypeScript DualIndexingAdapter, EmailIndexingService, Python vectordb_service.py
VECTORDB_ENDPOINT=http://localhost:8001
VECTORDB_PATH=./vector_store

# Indexing behavior configuration
# Enable/disable vector database indexing (true/false)
ENABLE_VECTORDB=true

# Enable transaction safety for dual indexing (true/false)
TRANSACTION_SAFETY=true

# Batch size for indexing operations (number of emails per batch)
INDEXING_BATCH_SIZE=20

# ===================================================================
# AI SERVICES CONFIGURATION
# ===================================================================
# Configuration for AI-powered email classification and response generation

# Groq API configuration for RAG (Retrieval Augmented Generation)
# Used by: Python rag_service.py for AI reply generation
# Get your API key from: https://console.groq.com/keys
GROQ_API_KEY=your_groq_api_key_here

# ===================================================================
# NOTIFICATION SERVICES CONFIGURATION
# ===================================================================
# Configuration for external notifications and integrations

# Discord Bot Configuration
# Used by: Python DiscordNotifier.py
# Create a Discord application at: https://discord.com/developers/applications
DISCORD_BOT_TOKEN=your_discord_bot_token
DISCORD_CHANNEL_ID=your_discord_channel_id
DISCORD_APP_URL=https://app.example.com/emails

# Slack Configuration
# Used by: TypeScript SlackService.ts, ImapService.ts
# Get your token from: https://api.slack.com/apps
SLACK_API_TOKEN=your_slack_api_token

# Generic Webhook Configuration
# Used by: TypeScript WebhookService.ts, ImapService.ts
WEBHOOK_URL=https://your-webhook-endpoint.com/webhook

# ===================================================================
# API GATEWAY CONFIGURATION
# ===================================================================
# Configuration for the API Gateway service that routes requests

# API Gateway service URLs
# Used by: Python api_gateway_onebox.py
API_SERVER_URL=http://localhost:3000
VECTORDB_SERVICE_URL=http://localhost:8001

# Gateway service port
# The port where the API Gateway will run
GATEWAY_PORT=3001

# ===================================================================
# SECURITY - EMAIL CREDENTIALS ENCRYPTION
# ===================================================================
# CRITICAL: Encryption key for storing user email credentials
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
# 
# SECURITY REQUIREMENTS:
# - NEVER commit this key to version control
# - Rotate every 90 days in production
# - Store securely (environment variable, secrets manager, or vault)
# - Use different keys for dev/staging/production
# 
# Example: CREDENTIALS_ENCRYPTION_KEY=vx8pDQZ3YqV8K7JmN9PFxW2HqG3LpKfR8tZ4VnX9YpQ=
CREDENTIALS_ENCRYPTION_KEY=CHANGE_THIS_TO_A_SECURE_KEY

# ===================================================================
# APPLICATION CONFIGURATION
# ===================================================================
# General application settings and behavior

# Application mode configuration
# Set to "true" to enable demo mode with sample data
# Used by: Python streamlit_app.py, app.py
DEMO_MODE=false

# Calendar integration
# Used by: Python main.py for calendar booking links
CAL_COM_LINK=https://cal.com/your-username

# Node.js environment
# Used by: TypeScript Logger.ts and other Node.js services
NODE_ENV=development

# ===================================================================
# PERFORMANCE AND SYSTEM CONFIGURATION
# ===================================================================
# Low-level system configuration for optimal performance

# PyTorch/ML Configuration
# Used by: Python vectordb_service.py, streamlit_app.py
# Forces CPU usage to avoid CUDA-related issues
CUDA_VISIBLE_DEVICES=-1
FORCE_CPU=1
TF_CPP_MIN_LOG_LEVEL=3
TF_ENABLE_ONEDNN_OPTS=0
TOKENIZERS_PARALLELISM=false

# ===================================================================
# PRODUCTION DEPLOYMENT CONFIGURATION
# ===================================================================
# Additional settings for production deployments

# Database paths for production (ensure these directories exist and are writable)
# VECTORDB_PATH=/var/lib/onebox/vector_store
# ELASTICSEARCH_DATA_PATH=/var/lib/onebox/elasticsearch

# Service URLs for production deployment
# VECTORDB_ENDPOINT=http://vectordb-service:8001
# ELASTICSEARCH_URL=http://elasticsearch-service:9200

# Security settings for production
# NODE_ENV=production
# TLS_CERT_PATH=/etc/ssl/certs/onebox.crt
# TLS_KEY_PATH=/etc/ssl/private/onebox.key

# ===================================================================
# QUICK SETUP CHECKLIST
# ===================================================================
# 1. Set up email IMAP credentials (required for core functionality)
# 2. Install and start Elasticsearch (or use cloud service)
# 3. Configure AI services (Groq API key for smart replies)
# 4. Set up notification services (Discord, Slack, Webhooks) as needed
# 5. Adjust performance settings if running in constrained environments
# 6. For production: update paths and service URLs accordingly
# ===================================================================
